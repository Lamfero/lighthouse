import sqlite3 as sql
import os
import time as t
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, message, BotCommandScopeChat, AllowedUpdates
from aiogram.utils import executor
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher.filters.filters import FilterRecord
from asyncio import *

 

from reply_markup import *
from pyqiwip2p import QiwiP2P
from config import *
from funcs import *
from random import randint
import requests




token = token
PAYMENT_TOKEN = PAYMENT_TOKEN_TEST
bot = Bot(token=token)
dp = Dispatcher(bot)
# p2p = QiwiP2P(auth_key=PAYMENT_QIWI_TOKEN)
#1230154081
con = sql.connect('project.db', timeout=10)
cur = con.cursor()


@dp.message_handler(commands=['a'])
async def a(message: types.Message):
    id = message.from_user.id
    await bot.get_updates(allowed_updates=AllowedUpdates.MESSAGE + AllowedUpdates.EDITED_MESSAGE)
    await bot.delete_message(id, message.message_id)
    if id in [5236738540, 1230154081, 423479827]:
        cur.execute("UPDATE `users` SET `admin` = '2' WHERE `id` = '{}'".format(id))
        con.commit()
        await bot.send_message(message.from_user.id, "–°—Ç–∞—Ç—É—Å –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–Ω –≤—ã–¥–∞–Ω.", reply_markup=get_main_menu(id))


@dp.message_handler(commands=['test'])
async def test(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        menu = InlineKeyboardMarkup()
        site = InlineKeyboardButton(text="–°–∞–π—Ç–∏–∫", web_app=WebAppInfo(url="https://xn80aue1.vh104.hosterby.com"))
        menu.add(site)
        await bot.send_message(id, "–¢–µ—Å—Ç", reply_markup=menu)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        subtext = message.text[7:]
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            if subtext == '':
                if 'registration' in user_select:
                    await bot.delete_my_commands(BotCommandScopeChat(chat_id=id))
                    change_select(id, 'registration (start)')
                    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç! –í –Ω–∞—à–µ–º –±–æ—Ç–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –æ–±—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∂–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö "FAQ" –∏ "–û –Ω–∞—Å".', reply_markup=start_menu)
                else:
                    await bot.set_my_commands([
                        types.BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
                        types.BotCommand("purse", "–ö–æ—à–µ–ª–µ–∫"),
                        types.BotCommand("tariff", "–¢–∞—Ä–∏—Ñ—ã"),
                        types.BotCommand("ref_program", "–†–µ—Ñ. –ø—Ä–æ–≥—Ä."),
                        ], BotCommandScopeChat(chat_id=id))
                    level_admin = check_admin_level(id)
                    if level_admin > 0:
                        
                        if level_admin == 1:
                            level_name = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {level_name}! –í –Ω–∞—à–µ–º –±–æ—Ç–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –æ–±—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∂–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö "FAQ" –∏ "–û –Ω–∞—Å".', reply_markup=get_main_menu(id))
                        elif level_admin == 2:
                            level_name = '–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                            await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {level_name}! –í –Ω–∞—à–µ–º –±–æ—Ç–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –æ–±—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∂–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö "FAQ" –∏ "–û –Ω–∞—Å".', reply_markup=get_main_menu(id))
                    else:
                        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç! –í –Ω–∞—à–µ–º –±–æ—Ç–µ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –æ–±—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∂–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö "FAQ" –∏ "–û –Ω–∞—Å".', reply_markup=get_main_menu(id))
            else:
                id_to_action = subtext
                if user_select == '':
                    pass
        else:
            await bot.delete_my_commands(BotCommandScopeChat(chat_id=id))
            add_user(id, username)
            secret_key = generate_secret_key(id)
            print(f'+ —é–∑–µ—Ä {first_name}')
            if len(subtext) > 0:
                add_referal(id, subtext)
                
            change_select(id, 'registration (start)')
            await bot.send_message(message.from_user.id, f'–ú–∞—è–∫–ë–æ—Ç ‚Äì —ç—Ç–æ\n¬ò‚Äî –ü—Ä–æ–µ–∫—Ç—ã\n¬ò‚Äî –ó–∞–¥–∞—á–∏\n¬ò‚Äî –í–æ–ø—Ä–æ—Å—ã\n–ù–∞—Ö–æ–¥–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞, —É—á–∞—Å—Ç–≤—É–π –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞–π –∏—Ö —Å–∞–º, —Ä–µ—à–∞–π —Ä–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±–æ–∫ –æ –±–æ–∫ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏!', reply_markup=start_menu)


@dp.message_handler(commands='profile')
async def profile(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            await bot.delete_message(id, message.message_id)
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                change_select(id, 'profile_menu')
                text = see_user_info_id(id)
                if len(text) > 0:
                    path = get_profile(id)
                    with open(path, "rb") as file:
                        await bot.send_photo(id, file, reply_markup=get_profile_menu(id))
                    os.remove(path)
                else:
                    await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(commands='purse')
async def purse(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            await bot.delete_message(id, message.message_id)
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                delete_select(id)
                await bot.send_message(id, 'üëõ –ö–æ—à–µ–ª–µ–∫:', reply_markup=purse_menu)
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(commands='tariff')
async def tariff(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            await bot.delete_message(id, message.message_id)
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                delete_select(id)
                result = cur.execute("SELECT * FROM `tariff`").fetchall()
                tariff_menu = ReplyKeyboardMarkup(row_width=3)
                for tariff in result:
                    name = tariff[0]
                    tariff_button = KeyboardButton(text=f'üöÄ –¢–∞—Ä–∏—Ñ {name}')
                    tariff_menu.add(tariff_button)
                tariff_menu.add(back_button)
                await bot.send_message(id, '–¢–∞—Ä–∏—Ñ—ã:', reply_markup=tariff_menu)
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(commands='ref_program')
async def ref_program(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            await bot.delete_message(id, message.message_id)
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                await bot.send_message(id, "üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ. –ø—Ä–æ–≥—Ä.", reply_markup=ref_menu)
                change_select(id, 'ref_menu')
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(commands='faq')
async def FAQ(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            await bot.delete_message(id, message.message_id)
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            else:
                delete_select(id)
                text = 'üßê FAQ\n\n–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:'
                await bot.send_message(id, text, reply_markup=back_to_main_menu)
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(commands='delete_me')
async def delete_me(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            delete_user(id)
            await bot.send_message(id, '–£—Å–ø–µ—à–Ω–æ')


@dp.callback_query_handler(text_contains='see_user_info_')
async def see_user_info(callback: types.CallbackQuery):
    if message.chat.type == 'private':
        id = callback.from_user.id
        uid = callback.data[14:]
        if check_admin_level(id, 2):
            update_last_online(id)
            text = see_user_info_id(uid)
            if len(text) > 0:
                await bot.send_message(id, f'{text}')
            else:
                await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')


@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types. Message):
    id = message.from_user.id
    if 'buy_' in message.successful_payment.invoice_payload:
        sum = int(message.successful_payment.invoice_payload[4:])
        await bot.send_message(id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {sum}‚ÇΩ")
        update_balance(id, sum)
        add_action_at_payments_log(id, sum, "replenish", '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.')



    """"
    
    <!DOCTYPE html>
    <html>
    <body>

    <iframe width="420" height="345" src="https://www.youtube.com/embed/tgbNymZ7vqY">
    </iframe>

    </body>
    </html>


    """


@dp.message_handler(content_types=['photo'])
async def photo(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            # if 'registration' in user_select:
            #     if user_select == 'registration (enter photo)':
            #         await message.photo[-1].download(destination_file= f"photos/profile/{id}.png")
            #         change_select(id, 'registration')
            #         path = get_registration_avatar_image(id)
            #         with open(path, "rb") as file:
            #             await bot.send_photo(message.from_user.id, file)
            #         os.remove(path)
            #         answer = f'–ü—Ä–æ—Ñ–∏–ª—å:\n\n{get_json_user_field(id, "name_surname")}\n–í–æ–∑—Ä–∞—Å—Ç:{get_age_by_date(get_json_user_field(id, "date_birth"))}\n–ì–æ—Ä–æ–¥:{get_json_user_field(id, "city")}\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:{get_json_user_field(id, "main_category_1")} {get_json_user_field(id, "main_category_2")} {get_json_user_field(id, "main_category_3")}\n–û–ø–∏—Å–∞–Ω–∏–µ:{get_json_user_field(id, "description")}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã:{get_json_user_field(id, "interests")}'
            #         await bot.send_message(id, f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞.\n\n{answer}\n\n –ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_profile_menu)
            if user_select == 'edit_item_profile_menu_photo':
                delete_select(id)
                if check_verification(id):
                    if os.path.exists(f"photos/for_profile_moderation/{id}.png"):
                        await bot.send_message(id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∞.')
                    else:
                        set_moderation_for_profile(id, 'photo')
                        await message.photo[-1].download(destination_file= f"photos/for_profile_moderation/{id}.png")
                        await bot.send_message(id, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∞.', reply_markup=get_main_menu(id))
                else:
                    await message.photo[-1].download(destination_file= f"photos/profile/{id}.png")
                    await bot.send_message(id, '–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä.', reply_markup=get_main_menu(id))
            elif user_select == 'create_project_media':
                add_media_in_project_sample(id, 'photo')
                path = get_path_for_media_in_project_sample(id, 'photo')
                await message.photo[-1].download(destination_file = path)
                with open(f"json/creating_project/{id}.json", "r") as file:
                    structure = json.load(file)
                    file.close()
                len_array = len(structure["project_media"])
                if len_array == 5:
                    change_select(id, "create_project_final_step")
                    await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                    photos = get_photo_from_project_sample(id)
                    if photos != 0:
                        for photo in photos:
                            with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                await bot.send_photo(id, file)
                    video_menu = get_video_from_project_sample(id)
                    if video_menu != None:
                        await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                else:
                    await bot.send_message(id, f"–û—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")
                    
            elif user_select == 'create_question_add_photo_file_1' or user_select == 'create_question_add_photo_file_2' or user_select == 'create_question_add_photo_file_3':
                if user_select == 'create_question_add_photo_file_1':
                    change_select(id, 'create_question_add_photo_file_2')
                    add_info_in_creating_question(id, 'photo_1', '+')
                    await message.photo[-1].download(destination_file= f"photos/creating_question/{id}_1.png")
                elif user_select == 'create_question_add_photo_file_2':
                    change_select(id, 'create_question_add_photo_file_3')
                    add_info_in_creating_question(id, 'photo_2', '+')
                    await message.photo[-1].download(destination_file= f"photos/creating_question/{id}_2.png")
                elif user_select == 'create_question_add_photo_file_3':
                    change_select(id, 'create_question_add_video_file')
                    add_info_in_creating_question(id, 'photo_3', '+')
                    await message.photo[-1].download(destination_file= f"photos/creating_question/{id}_3.png")
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(content_types='location')
async def location(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        if check_exist_user(id):
            update_last_online(id)
            user_select = get_user_select(id)
            coord = message.location
            if user_select == 'registration (enter city)':
                coord = str(coord["latitude"]) + ', ' + str(coord["longitude"])
                city = get_city_by_coods(coord)
                add_json_user_info(id, 'city', city)
                change_select(id, 'registration (enter main_category_1)')
                path = get_registration_location_image(city)
                with open(path, "rb") as file:
                    await bot.send_photo(id, file, reply_markup=select_category_for_profile)
                with open("images/registration/enter_main_categories.png", "rb") as file:
                    await bot.send_photo(id, file, reply_markup=select_category_for_profile)
                os.remove(path)
            elif user_select == 'create_project_geo':
                coord = str(coord["latitude"]) + ', ' + str(coord["longitude"])
                city = get_city_by_coods(coord)
                change_select(id, 'create_project_category')
                add_info_in_project_sample(id, 'project_city', city)
                await bot.send_message(id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {city}.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.chat.type == 'private':
        id = message.from_user.id
        username = message.from_user.username
        msg = str(message.text)
        if check_exist_user(id):
            update_last_online(id) 
            user_select = get_user_select(id)
            print(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {id} –í—Ä–µ–º—è: {datetime.datetime.today().time().hour}:{datetime.datetime.today().time().minute} –®–∞–≥: {user_select}')
            if 'registration' in user_select:
                await bot.send_message(id, "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", reply_markup=registration_site_menu)
            #     if msg == '–ù–∞—á–∞—Ç—å':
            #         if user_select == 'registration (start)':
            #             change_select(id, 'registration (i_read)')
            #             with open("images/registration/terms_of_use.png", "rb") as file:
            #                 photo = file
            #                 await bot.send_photo(id, photo, reply_markup=i_read_menu)
            #             await bot.send_message(id, "1)\n2)\n3)")
            #     elif msg == '–ü–æ–Ω—è—Ç–Ω–æ':
            #         if user_select == 'registration (start input)':
            #             change_select(id, 'registration (enter name_surname)')
            #             with open("images/registration/name_surname.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=remove_reply_keyboard)
            #     elif msg == '–ù–∞–∑–∞–¥':
            #         await bot.delete_message(id, message.message_id)
            #         if user_select == 'registration (enter city)':
            #             change_select(id, 'registration (enter date_birth)')
            #             with open("images/registration/date_birth.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=registration_menu)
                                
            #         elif user_select == 'registration (enter main_category_1)':
            #             change_select(id, 'registration (enter city)')
            #             with open("images/registration/your_city.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=registration_menu)
                        
            #         elif user_select == 'registration (enter main_category_2)':
            #             change_select(id, 'registration (enter main_category_1)')
            #             add_json_user_info(id, 'main_category_1', '')
            #             add_json_user_info(id, 'main_category_2', '')
            #             add_json_user_info(id, 'main_category_3', '')
            #             with open("images/registration/enter_main_categories.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #         elif user_select == 'registration (enter main_category_3)':
            #             change_select(id, 'registration (enter main_category_2)')
            #             add_json_user_info(id, 'main_category_3', '')
            #             add_json_user_info(id, 'main_category_2', '')
            #             path = get_registration_main_catigories_image(id)
            #             with open(path, "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #             os.remove(path)

            #         elif user_select == 'registration (enter photo)':
            #             change_select(id, 'registration (enter description)')
            #             with open("images/registration/your_description.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=registration_menu)
            #         elif user_select == 'registration (enter interest)':
            #             change_select(id, 'registration (enter main_category_3)')
            #             add_json_user_info(id, 'main_category_3', '')
            #             path = get_registration_main_catigories_image(id)
            #             with open(path, "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #             os.remove(path)
            #         elif user_select == 'registration (enter description)':
            #             change_select(id, 'registration (enter interest)')
            #             add_json_user_info(id, 'interests', '')
            #             with open('images/registration/enter_interests.png', "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #         elif user_select == 'registration (enter date_birth)':
            #             change_select(id, 'registration (enter name_surname)')
            #             await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.", reply_markup=remove_reply_keyboard)
                
            #     elif msg == '–î–∞–ª–µ–µ':
            #         await bot.delete_message(id, message.message_id)
            #         if user_select == 'registration (enter main_category_1)':
            #             with open("images/registration/enter_main_categories.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #         elif user_select == 'registration (enter main_category_2)':
            #             add_json_user_info(id, 'main_category_2', '')
            #             change_select(id, 'registration (enter interest)')
            #             with open("images/registration/enter_interests.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #         elif user_select == 'registration (enter main_category_3)':
            #             change_select(id, 'registration (enter interest)')
            #             with open("images/registration/enter_interests.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #         elif user_select == 'registration (enter interest)':
                        
            #             interests = check_user_interests(id)
            #             array = interests.rsplit("  ")
            #             if len(array)-1 > 0:
            #                 change_select(id, 'registration (enter description)')
            #                 with open("images/registration/your_description.png", "rb") as file:
            #                     await bot.send_photo(id, file, reply_markup=registration_menu)
            #             else:
            #                 await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.')
            #         else:
            #             await bot.send_message(id, "–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è.")
            #     elif user_select == 'registration (i_read)':
            #         if msg == '–°–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏':
            #             change_select(id, 'registration (start input)')
            #             with open("images/registration/start_input.png", "rb") as file:
            #                 await bot.send_photo(id, file, reply_markup=understand_menu)
                        
            #     elif user_select == 'registration (enter main_category_1)' or user_select == 'registration (enter main_category_2)' or user_select == 'registration (enter main_category_3)' or user_select == 'registration (enter interest)':
            #         if check_category(msg):
            #             category = msg
            #             await bot.delete_message(id, message.message_id)
            #             if user_select == 'registration (enter main_category_1)':
            #                 change_select(id, 'registration (enter main_category_2)')
            #                 add_json_user_info(id, 'main_category_1', category)
            #                 path = get_registration_main_catigories_image(id)
            #                 with open(path, "rb") as file:
            #                     await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                 os.remove(path)
            #             elif user_select == 'registration (enter main_category_2)':
            #                 if get_json_user_field(id, 'main_category_1') == msg:
            #                     await bot.send_message(id, '–≠—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
            #                 else:
            #                     change_select(id, 'registration (enter main_category_3)')
            #                     add_json_user_info(id, 'main_category_2', category)
            #                     path = get_registration_main_catigories_image(id)
            #                     with open(path, "rb") as file:
            #                         await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                     os.remove(path)
            #             elif user_select == 'registration (enter main_category_3)':
            #                 if get_json_user_field(id, 'main_category_1') == msg or get_json_user_field(id, 'main_category_2') == msg:
            #                     await bot.send_message(id, '–≠—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
            #                 else:
            #                     add_json_user_info(id, 'main_category_3', category)
            #                     change_select(id, 'registration (enter interest)')
            #                     path = get_registration_main_catigories_final_image(id)
            #                     with open(path, "rb") as file:
            #                         await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                     with open("images/registration/enter_interests.png", "rb") as file:
            #                         await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                     os.remove(path)
            #             elif user_select == 'registration (enter interest)':
            #                 interests = check_user_interests(id)
            #                 array = interests.rsplit("  ")
            #                 if len(array) <= 7:
            #                     if check_interests_original(array, category):
            #                         if len(array) == 6:
            #                             if interests == '':
            #                                 interests = category
            #                             else:
            #                                 interests = interests + '  ' + category
            #                             add_json_user_info(id, 'interests', interests)
                                        
            #                             change_select(id, 'registration (enter description)')

            #                             path = get_registration_interests_final_image(id)
            #                             with open(path, "rb") as file:
            #                                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                             os.remove(path)

            #                             with open("images/registration/your_description.png", "rb") as file:
            #                                 await bot.send_photo(id, file, reply_markup=registration_menu)
            #                         else:
            #                             if interests == '':
            #                                 interests = category
            #                             else:
            #                                 interests = interests + '  ' + category
            #                             add_json_user_info(id, 'interests', interests)
            #                             path = get_registration_interests_image(id)
            #                             with open(path, "rb") as file:
            #                                 await bot.send_photo(id, file, reply_markup=select_category_for_profile)
            #                             os.remove(path)
            #                     else:
            #                         await bot.send_message(id, '–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
            #     elif user_select == 'registration':
            #         if msg == '–°–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
            #             change_select(id, 'registration (i_read)')
            #             with open("images/registration/terms_of_use.png", "rb") as file:
            #                 photo = file
            #                 await bot.send_photo(id, photo, reply_markup=i_read_menu)
            #             await bot.send_message(id, "1)\n2)\n3)")
            #         elif msg == '–ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
            #             user_select = get_user_select(id)
            #             change_select(id, 'registration (edit description)')
            #             await bot.send_message(id, f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n–ö–∞–∫–æ–π —É –í–∞—Å –æ–ø—ã—Ç? –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏? –ö–∞–∫–∏–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–º–µ—Ç–∏—Ç—å –≤ —Å–µ–±–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞?", reply_markup=registration_menu)
            #         elif msg == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            #             await bot.set_my_commands([
            #             types.BotCommand("profile", "–ü—Ä–æ—Ñ–∏–ª—å"),
            #             types.BotCommand("purse", "–ö–æ—à–µ–ª–µ–∫"),
            #             types.BotCommand("tariff", "–¢–∞—Ä–∏—Ñ—ã"),
            #             types.BotCommand("ref_program", "–†–µ—Ñ. –ø—Ä–æ–≥—Ä."),
            #             types.BotCommand("faq", "FAQ"),
            #             ], BotCommandScopeChat(chat_id=id))
            #             user_select = get_user_select(id)
            #             change_select(id, '')
            #             end_registration(id)
            #             await bot.send_message(id, '–û—Ç–ª–∏—á–Ω–æ! –°—Ç–∞—Ç—É—Å –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äì –±–∞–∑–æ–≤—ã–π.–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", –ø—Ä–æ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" —á–µ—Ä–µ–∑ –ª–µ–≤–æ–µ –ú–µ–Ω—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –∏ –ø–æ—Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞.–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Å–µ—Ä–≤–∏—Å–∞. –ï—Å–ª–∏ —É –í–∞—Å –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –í—ã –∑–∞–±—É–¥–µ—Ç–µ, –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª FAQ –≤ –õ–µ–≤–æ–º –ú–µ–Ω—é.', reply_markup=get_main_menu(id))
            #         else:
            #             await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')
            #     else:
            #         if user_select == 'registration (enter name_surname)':
            #             if len(msg) < 35:
            #                 n_words = len(re.split(' |-', msg))
            #                 if n_words > 1 and n_words <= 5:
            #                     if check_name_surname(msg):
            #                         name_surname = msg
            #                         add_json_user(id, name_surname)
            #                         change_select(id, 'registration (enter date_birth)')
            #                         path = get_registration_name_image(name_surname)
            #                         with open(path, "rb") as file:
            #                             await bot.send_photo(id, file, reply_markup=next_and_back_menu)
            #                         os.remove(path)
            #                         with open("images/registration/date_birth.png", "rb") as file:
            #                             await bot.send_photo(id, file, reply_markup=registration_menu)
            #                     else:
            #                         await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é.")
            #                 else:
            #                     await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é. –î–æ 35 —Å–∏–º–≤–æ–ª–æ–≤. –†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "-"')
            #         elif user_select == 'registration (enter date_birth)':
            #             if len(msg) == 10:
            #                 date = msg
            #                 splited_date = date.rsplit(".")
            #                 if msg == '00.00.0000' or splited_date[0] == '00' or splited_date[1] == '00' or splited_date[2] == '0000':
            #                     await bot.send_message(id, '‚ò¶   ‚ò¶   ‚ò¶   ‚ò¶')
            #                 else:
            #                     if check_valid_date(date):
            #                         add_json_user_info(id, 'date_birth', date)
            #                         if check_age_by_date(date):
            #                             with open("images/registration/your_city.png", "rb") as file:
            #                                 await bot.send_photo(id, file, reply_markup=registration_menu)
            #                             change_select(id, 'registration (enter city)')
            #                         else:
            #                             await bot.send_message(id, f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É.')
            #                     else:
            #                         await bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É: –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            #             else:
            #                 await bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É: –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
            #         elif user_select == 'registration (enter description)':
            #             if len(msg) < 300:
            #                 add_json_user_info(id, 'description', msg)
            #                 change_select(id, 'registration (enter photo)')
            #                 await bot.send_message(id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=registration_menu)
            #             else:
            #                 await bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –õ–∏–º–∏—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: 300 —Å–∏–º–≤–æ–ª–æ–≤.')
            #         elif user_select == 'registration (edit description)':
            #             if len(msg) < 300:
            #                 add_json_user_info(id, 'description', msg)
            #                 change_select(id, 'registration')
            #                 path = get_registration_avatar_image(id)
            #                 with open(path, "rb") as file:
            #                     await bot.send_photo(message.from_user.id, file)
            #                 os.remove(path)
            #                 answer = f'–ü—Ä–æ—Ñ–∏–ª—å:\n\n{get_json_user_field(id, "name_surname")}\n–í–æ–∑—Ä–∞—Å—Ç:{get_age_by_date(get_json_user_field(id, "date_birth"))}\n–ì–æ—Ä–æ–¥:{get_json_user_field(id, "city")}\n–û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:{get_json_user_field(id, "main_category_1")} {get_json_user_field(id, "main_category_2")} {get_json_user_field(id, "main_category_3")}\n–û–ø–∏—Å–∞–Ω–∏–µ:{get_json_user_field(id, "description")}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã:{get_json_user_field(id, "interests")}'
            #                 await bot.send_message(id, f"–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞.\n\n{answer}\n\n –ñ–µ–ª–∞–µ—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=edit_profile_menu)
            #             else:
            #                 await bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –õ–∏–º–∏—Ç –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: 300 —Å–∏–º–≤–æ–ª–æ–≤.')
            else:
                if msg == 'üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
                    await bot.delete_message(id, message.message_id)
                    level = check_admin_level(id)
                    print(level)
                    if level == 1:
                        change_select(id, "admin_panel")
                        await bot.send_message(message.from_user.id, '–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=admin_panel_1_menu)
                    elif level == 2:
                        change_select(id, "admin_panel")
                        await bot.send_message(message.from_user.id, '–ü–∞–Ω–µ–ª—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=admin_panel_2_menu)
                elif msg == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                    change_select(id, 'main_menu')
                    await bot.send_message(id , '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                elif msg == '–ù–∞–∑–∞–¥':
                    if 'balance_menu_' in user_select:
                        delete_select(id)
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, 'üëõ –ö–æ—à–µ–ª–µ–∫:', reply_markup=purse_menu)
                    elif user_select == 'balance_menu_payments_log_replenish':
                        delete_select(id)
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç.', reply_markup=purse_log_menu)
                    elif user_select == 'ref_menu' or user_select == 'profile_menu':
                        delete_select(id)
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                    elif user_select == 'ref_menu_link':
                        change_select(id, 'ref_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, 'üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ. –ø—Ä–æ–≥—Ä.', reply_markup=ref_menu)
                    elif user_select == 'ref_menu_appruf':
                        change_select(id, 'ref_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, 'üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ. –ø—Ä–æ–≥—Ä.', reply_markup=ref_menu)
                    elif user_select == 'ref_menu_in_hold':
                        change_select(id, 'ref_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, 'üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ. –ø—Ä–æ–≥—Ä.', reply_markup=ref_menu)
                    elif user_select == 'ref-menu_terms':
                        change_select(id, 'ref_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, 'üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ. –ø—Ä–æ–≥—Ä.', reply_markup=ref_menu)
                    elif user_select == 'watching_tariff':
                        delete_select(id)
                        result = cur.execute("SELECT * FROM `tariff`").fetchall()
                        tariff_menu = ReplyKeyboardMarkup(row_width=3)
                        for tariff in result:
                            name = tariff[0]
                            tariff_button = KeyboardButton(text=f'üöÄ –¢–∞—Ä–∏—Ñ {name}')
                            tariff_menu.add(tariff_button)
                        tariff_menu.add(back_button)
                        await bot.send_message(id, '–¢–∞—Ä–∏—Ñ—ã:', reply_markup=tariff_menu)
                    elif user_select == 'edit_profile_menu' or user_select == 'notifications_profile_menu' or user_select == 'verification_profile_menu':
                        change_select(id, 'profile_menu')
                        text = see_user_info_id(id)
                        if len(text) > 0:
                            path = get_profile(id)
                            with open(path, "rb") as file:
                                await bot.send_photo(id, file, reply_markup=get_profile_menu(id))
                            os.remove(path)
                        else:
                            await bot.send_message(id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
                    elif 'edit_item_profile_menu_' in user_select:
                        change_select(id, 'edit_profile_menu')
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.', reply_markup=edit_profile_item_menu)
                    elif user_select == 'edit_item_profile_menu_category_profile':
                        delete_select(id)
                        await bot.send_message(id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                    elif user_select == 'edit_item_profile_menu_category_profile_2':
                        change_select(id, 'edit_item_profile_menu_category_profile')
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=select_category_for_profile)
                    elif user_select == 'edit_item_profile_menu_category_profile_3':
                        change_select(id, 'edit_item_profile_menu_category_profile')
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=select_category_for_profile)
                    
                    elif 'create_project_' in user_select:                                                          #–ù–ê–ó–ê–î –í –°–û–ó–î–ê–ù–ò–ò –ü–†–û–ï–ö–¢–ê
                        if user_select == 'create_project_name':
                            change_select(id, "create")
                            await bot.send_message(id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å?', reply_markup=create_menu)
                        
                        elif user_select == 'create_project_description':
                            change_select(id, "create_project_name")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        
                        elif user_select == 'create_project_type':
                            change_select(id, "create_project_description")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        
                        elif user_select == 'create_project_category' or user_select == "create_project_geo":
                            change_select(id, "create_project_type")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=create_project_type_menu)

                        elif user_select == 'create_project_subcategories': 
                            change_select(id, "create_project_category")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
                        
                        elif user_select == 'create_project_need_categories':
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            content["project_subcategories"] = ''
                            with open(f"json/creating_project/{id}.json", "w") as file:
                                file.write(json.dumps(content))
                            change_select(id, "create_project_subcategories")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
                                
                        elif user_select == 'create_project_price' or user_select == 'create_project_price_fixed' or user_select == 'create_project_price_intermediate':
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            content["project_need_categories"] = ''
                            with open(f"json/creating_project/{id}.json", "w") as file:
                                file.write(json.dumps(content))
                            change_select(id, "create_project_need_categories")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_type_for_need_categories_of_project)

                        elif user_select == 'create_project_media':
                            change_select(id, "create_project_price")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                        
                        elif user_select == 'create_project_final_step':
                            change_select(id, "create_project_media")
                            await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)

                    elif 'warn_project_' in user_select:
                        project_id = user_select[13:]
                        change_select(id, f'action_with_project_{project_id}')
                        await bot.send_message(id, get_project_as_text(project_id), reply_markup=project_menu_in_find)
                    

                    elif 'create_question_' in user_select:
                        if user_select == 'create_question_text':
                            change_select(id, 'create_question_category_1')
                        elif user_select == 'create_question_add_photo_file_1' or user_select == 'create_question_add_photo_file_2' or user_select == 'create_question_add_photo_file_3':
                            change_select(id, 'create_question_text')
                            if os.path.exists(f"photos/creating_question/{id}_1"):
                                os.remove(f"photos/creating_question/{id}_1")
                            add_info_in_creating_question(id, 'photo_1', '-')
                            if os.path.exists(f"photos/creating_question/{id}_2"):
                                os.remove(f"photos/creating_question/{id}_2")
                            add_info_in_creating_question(id, 'photo_2', '-')
                            if os.path.exists(f"photos/creating_question/{id}_3"):
                                os.remove(f"photos/creating_question/{id}_3")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.", reply_markup=next_and_back_menu)
                        
                    else:
                        delete_select(id)
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                elif msg == '–î–∞–ª–µ–µ':
                    await bot.delete_message(id, message.message_id)
                    if user_select == 'edit_item_profile_menu_category_profile_2':
                        add_json_user_info(id, 'main_category_2', '')
                        add_json_user_info(id, 'main_category_3', '')
                        change_select(id, '')
                        await bot.send_message(id, f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                    elif user_select == 'edit_item_profile_menu_category_profile_3':
                        add_json_user_info(id, 'main_category_3', '')
                        change_select(id, '')
                        await bot.send_message(id, f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                    elif user_select == 'find_user_in_general_catalog':
                        random_id = get_random_user_id()
                        path = get_profile(random_id)
                        with open(path, "rb") as file:
                            await bot.send_photo(id, file, reply_markup=see_finding_user_profile)
                        os.remove(path)
                    elif 'find_user_by_name_' in user_select:
                        row = int(user_select[18:])
                        if len(msg) >= 3 <= 35:
                            name = get_choice_data(id)
                            n_words = len(re.split(' |-', name))
                            if n_words > 1 and n_words <= 5:
                                name = msg
                                result = find_user_by_name(name, row)
                                if result[0] != 0:
                                    change_select(id, f"find_user_by_name_{result[1]}")
                                    path = get_profile(result[0])
                                    with open(path, "rb") as file:
                                        await bot.send_photo(id, file, reply_markup=next_and_back_to_main_menu_menu)
                                    os.remove(path)
                                else:
                                    await bot.send_message(id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –±–æ–ª—å—à–µ –Ω–µ—Ç.", reply_markup=back_to_main_menu)
                            else:
                                await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ò–º—è –§–∞–º–∏–ª–∏—é")
                        else:
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ò–º—è –§–∞–º–∏–ª–∏—é")
                    elif 'create_project_' in user_select:                                                          #–î–ê–õ–ï–ï –í –°–û–ó–î–ê–ù–ò–ò –ü–†–û–ï–ö–¢–ê
                        if user_select == 'create_project_name':
                            if check_exists_field_of_project_sample(id, "project_name"):
                                change_select(id, "create_project_description")
                                await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                            else:
                                await bot.send_message(id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        
                        elif user_select == 'create_project_description':
                            if check_exists_field_of_project_sample(id, "project_description"):
                                change_select(id, "create_project_type")
                                await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=create_project_type_menu)
                            else:
                                await bot.send_message(id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        
                        elif user_select == 'create_project_type':
                            if check_exists_field_of_project_sample(id, "project_type"):
                                change_select(id, "create_project_category")
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞", reply_makup=select_category_for_project)
                            else:
                                await bot.send_message(id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=create_project_type_menu)


                        elif user_select == 'create_project_subcategories': 
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            if len(content["project_subcategories"].rsplit("  ")) > 0:
                                with open(f"json/creating_project/{id}.json", "r") as file:
                                    content = json.load(file)
                                content["project_need_categories"] = ''
                                with open(f"json/creating_project/{id}.json", "w") as file:
                                    file.write(json.dumps(content))
                                change_select(id, "create_project_need_categories")
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_type_for_need_categories_of_project)
                            else:
                                await bot.send_message(id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
                        
                        elif user_select == 'create_project_need_categories':
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            if len(content["project_need_categories"].rsplit("  ")) > 0:
                                change_select(id, "create_project_price")
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                            else:
                                await bot.send_message(id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_type_for_need_categories_of_project)
                                
                        elif user_select == 'create_project_price' or user_select == 'create_project_price_fixed' or user_select == 'create_project_price_intermediate':
                            if check_exists_field_of_project_sample(id, "project_price"):
                                change_select(id, "create_project_media")
                                await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)
                            else:
                                await bot.send_message(id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)

                        elif user_select == 'create_project_media':
                            change_select(id, "create_project_final_step")
                            await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                            photos = get_photo_from_project_sample(id)
                            if photos != 0:
                                for photo in photos:
                                    with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                        await bot.send_photo(id, file)
                            video_menu = get_video_from_project_sample(id)
                            if video_menu != None:
                                await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)

                elif msg == '–ü–æ–Ω—è—Ç–Ω–æ':
                    if user_select == 'find':
                        await bot.send_message(id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏?', reply_markup=find_menu)
                    elif user_select == 'create':
                        await bot.send_message(id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å?', reply_markup=create_menu)

                elif user_select == 'edit_item_profile_menu_description':
                    if check_verification(id):
                        if check_exists_field_in_profile_moderatin(id, 'description'):
                            if len(msg) < 300:
                                delete_select(id)
                                set_moderation_for_profile(id, 'description', data=msg)
                                await bot.send_message(id, '–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.', reply_markup=get_main_menu(id))
                            else:
                                await bot.send_message(id, '!!! –î–æ 300 —Å–∏–º–≤–æ–ª–æ–≤ !!!')
                        else:
                            await bot.send_message(id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è.')
                    else:
                        delete_select(id)
                        add_json_user_info(id, "description", msg)
                        await bot.send_message(id, '–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ', reply_markup=get_main_menu(id))
                elif 'edit_item_profile_menu_category_' in user_select:
                    await bot.delete_message(id, message.message_id)
                    if check_category(msg):
                        category = msg
                        if user_select == 'edit_item_profile_menu_category_profile':
                            add_json_user_info(id, 'main_category_1', category)
                            change_select(id, 'edit_item_profile_menu_category_profile_2')
                            await bot.send_message(id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ.',reply_markup=select_category_for_profile)
                        elif user_select == 'edit_item_profile_menu_category_profile_2':
                            add_json_user_info(id, 'main_category_2', category)
                            change_select(id, 'edit_item_profile_menu_category_profile_3')
                            await bot.send_message(id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ',)
                        elif 'edit_item_profile_menu_category_profile_3' in user_select:
                            add_json_user_info(id, 'main_category_3', category)
                            change_select(id, '')
                            await bot.send_message(id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.', reply_markup=get_main_menu(id))
                # elif msg == 'üí≥ –ú–æ—è –í–∏–∑–∞':
                #     await bot.delete_message(id, message.message_id)
                #     if check_type_visa(id) == 'participant':
                #         visa = open(f'visa_participant/{id}.png', 'rb')
                #         await bot.send_photo(id, visa, '–í–∞—à–∞ –≤–∏–∑–∞.')
                #     elif check_type_visa(id) == 'partner':
                #         visa = open(f'visa_partner/{id}.png', 'rb')
                #         await bot.send_photo(id, visa, '–í–∞—à–∞ –≤–∏–∑–∞.')
                #     elif check_type_visa(id) == 'group':
                #         visa = open(f'visa_group/{id}.png', 'rb')
                #         await bot.send_photo(id, visa, '–í–∞—à–∞ –≤–∏–∑–∞.')
                elif msg == '–°—Å—ã–ª–∫–∞':
                    if user_select == 'ref_menu':
                        change_select(id, 'ref_menu_link')
                        me = await bot.me
                        link = f'https://t.me/{me.username}?start={id}'
                        await bot.send_message(id, f"–í–∞—à–∞ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: {link}", reply_markup=back_menu)
                elif msg == '–ê–ø–ø—Ä—É–≤–Ω—É—Ç–æ':
                    if user_select == 'ref_menu':
                        change_select(id, 'ref_menu_appruf')
                        text = check_referals(id, 'appruf')
                        text = '–ê–ø–ø—Ä—É–≤–Ω—É—Ç–æ:\n\n' + text
                        await bot.send_message(id, text, reply_markup=back_menu)
                elif msg == '–í —Ö–æ–ª–¥–µ':
                    if user_select == 'ref_menu':
                        change_select(id, 'ref_menu_in_hold')
                        text = check_referals(id, 'in_hold')
                        text = '–í —Ö–æ–ª–¥–µ:\n\n' + text
                        await bot.send_message(id, text, reply_markup=back_menu)
                elif msg == '–£—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º—ã':
                    if user_select == 'ref_menu':
                        change_select(id, 'ref_menu_terms')
                        await bot.send_message(id, "–£—Å–ª–æ–≤–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n–í —Ö–æ–ª–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.", reply_markup=back_menu)
                
                
                elif 'üöÄ –¢–∞—Ä–∏—Ñ' in msg:
                    change_select(id, 'watching_tariff')
                    await bot.delete_message(id, message.message_id)
                    tariff_name = msg[8:]
                    buy_tariff_menu = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                    if tariff_name == '–°—Ç–∞–Ω–¥–∞—Ä—Ç':
                        tariff_info = get_tariff_info(tariff_name)
                        change_select(id, 'buy_tariff_standart')
                        buy_button = KeyboardButton(text='üöÄ –ö—É–ø–∏—Ç—å')
                        buy_tariff_menu.add(buy_button)
                        await bot.send_message(id, tariff_info, reply_markup=buy_tariff_menu)
                    elif tariff_name == '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π':
                        tariff_info = get_tariff_info(tariff_name, back_button)
                        change_select(id, 'buy_tariff_extended')
                        buy_button = KeyboardButton(text='üöÄ –ö—É–ø–∏—Ç—å')
                        buy_tariff_menu.add(buy_button, back_button)
                        await bot.send_message(id, tariff_info, reply_markup=buy_tariff_menu)
                    elif tariff_name == 'PRO':
                        tariff_info = get_tariff_info(tariff_name)
                        change_select(id, 'buy_tariff_pro')
                        buy_button = KeyboardButton(text='üöÄ –ö—É–ø–∏—Ç—å')
                        buy_tariff_menu.add(buy_button, back_button)
                        await bot.send_message(id, tariff_info, reply_markup=buy_tariff_menu)
                elif msg == 'üöÄ –ö—É–ø–∏—Ç—å':
                    if 'buy_tariff_' in user_select:
                        tariff = user_select[11:]
                        price = 0
                        if tariff == 'standart':
                            tariff_name = '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
                            price = get_tariff_info(tariff_name, 'for_buy')
                        elif tariff == 'extended':
                            tariff_name = '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π'
                            price = get_tariff_info(tariff_name, 'for_buy')
                        elif tariff == 'pro':
                            tariff_name = 'PRO'
                            price = get_tariff_info(tariff_name, 'for_buy')
                        if len(tariff_name) > 0:
                            if check_exists_sum(id, price):
                                update_balance(id, -price)
                                add_action_at_payments_log(id, price, "spending", f'–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_name}.')
                                update_tariff(id, tariff)
                                await bot.send_message(id, f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ {tariff_name} –Ω–∞ 30 –¥–Ω–µ–π.')
                            else:
                                await bot.send_message(id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')

                elif msg == '–°–æ–∑–¥–∞—Ç—å':
                    change_select(id, 'create')
                    await bot.delete_message(id, message.message_id)
                    if check_first_touch(id, 'create'):
                        add_first_touch(id, "create")
                        await bot.send_message(id, "–°–æ–∑–¥–∞—Ç—å\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n\n–í–æ–ø—Ä–æ—Å ‚Äì —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥–µ.\n\n–ó–∞–¥–∞—á–∞ ‚Äì —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—â–∏–π —Ä–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n\n–ü—Ä–æ–µ–∫—Ç ‚Äì –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.", reply_markup=understand_menu)
                    else:
                        await bot.send_message(id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å?', reply_markup=create_menu)
                
                elif msg == '–ù–∞–π—Ç–∏':
                    change_select(id, 'find')
                    await bot.delete_message(id, message.message_id)
                    if check_first_touch(id, 'find'):
                        add_first_touch(id, "find")
                        await bot.send_message(id, "–ù–∞–π—Ç–∏\n\n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –í–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ\n\n–ò –ø–æ–¥–±–∏—Ä–∞–π—Ç–µ –ª—é–¥–µ–π –¥–ª—è –í–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=understand_menu)
                    else:
                        await bot.send_message(id, '–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏?', reply_markup=find_menu)
            
                elif user_select == 'create':
                    if msg == 'üìÅ –ü—Ä–æ–µ–∫—Ç':
                        project_id = randint(1111111111, 9999999999)
                        create_project_sample(id, project_id)
                        change_select(id, 'create_project_name')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=next_and_back_to_main_menu_menu)
                    elif msg == 'üìò –ó–∞–¥–∞—á–∞':
                        change_select(id, 'create_task_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.')
                    elif msg == '‚ùì –í–æ–ø—Ä–æ—Å':
                        question_id = randint(1111111, 9999999)
                        change_select(id, 'create_question_category_1')
                        create_question_sample(id, question_id)
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–∞(–¥–æ 2-—É—Ö)', reply_markup=select_category_for_profile)
                        
                
                elif user_select == 'find':
                    if msg == 'üìÅ –ü—Ä–æ–µ–∫—Ç':
                        change_select(id, 'find_project_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=create_project_type_menu)
                    elif msg == 'üìò –ó–∞–¥–∞—á–∞':
                        change_select(id, 'find_task_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.')
                    elif msg == '‚ùì –í–æ–ø—Ä–æ—Å':
                        change_select(id, 'find_question_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.')
                    elif msg == '–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                        change_select(id, 'find_user_menu')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞', reply_markup=find_user_type_menu)
                
                elif user_select == 'find_project_menu':
                    if msg == '–û–Ω–ª–∞–π–Ω':
                        change_select(id , 'find_project_categories')
                        add_info_in_find_project(id, 'project_type', 'online')
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', reply_markup=find_project_categories_menu)
                    elif msg == '–û—Ñ—Ñ–ª–∞–π–Ω':
                        change_select(id , 'find_project_categories')
                        add_info_in_find_project(id, 'project_type', 'offline')
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', reply_markup=find_project_categories_menu)
                    else:
                        await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=find_project_menu)

                elif user_select == 'find_project_categories':
                    if msg == '–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
                        change_select(id, 'find_project_final')
                        add_info_in_find_project(id, 'project_categories', 'my')
                        await bot.send_message(id, '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?', reply_markup=start_finding_menu)
                    elif msg == '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
                        add_info_in_find_project(id, 'project_categories', 'all')
                        change_select(id, 'find_project_final')
                        await bot.send_message(id, '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ ?', reply_markup=start_finding_menu)

                elif user_select == 'find_project_final':
                    if msg == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫':
                        await bot.delete_message(id, message.message_id)
                        if get_field_projects_to_find(id, 'categories') == 'my':
                            project_id =  get_random_project_by_personal_settings(id)
                            change_select(id, f'action_with_project_{project_id}')
                            if project_id == 0:
                                await bot.send_message(id, '–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç—É –ø—Ä–æ–µ–∫—Ç–æ–≤', reply_markup=back_to_main_menu)
                            else:
                                await bot.send_message(id, get_project_as_text(project_id), reply_markup=project_menu_in_find)
                        elif get_field_projects_to_find(id, 'categories') == 'all':
                            project_id = get_random_project_by_not_personal_settings(id)
                            change_select(id, f'action_with_project_{project_id}')
                            await bot.send_message(id, get_project_as_text(project_id), reply_markup=project_menu_in_find)
                        else:
                            await bot.send_message(id, 'DB ERROR', reply_markup=back_to_main_menu)
                
                elif 'action_with_project_' in user_select:
                    project_id = user_select[20:]
                    if msg == '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è':
                        await bot.delete_message(id, message.message_id)
                        follow_project(id, project_id)
                        await bot.send_message(id, '–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç.')
                    elif msg == '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è':
                        change_select(id, f'warn_project_{project_id}')
                        await bot.delete_message(id, message.message_id)
                        await bot.send_message(id, '–í —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ?', reply_markup=warn_project_menu)
                    elif msg == '–°–ª–µ–¥—É—é—â–∏–π':
                        await bot.delete_message(id, message.message_id)
                        if get_field_projects_to_find('1230154081', 'categories') == 'my':
                            project_id =  get_random_project_by_personal_settings(id)
                            change_select(id, f'action_with_project_{project_id}')
                            if project_id == 0:
                                await bot.send_message(id, '–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç—É –ø—Ä–æ–µ–∫—Ç–æ–≤', reply_markup=back_to_main_menu)
                            else:
                                await bot.send_message(id, get_project_as_text(project_id), reply_markup=project_menu_in_find)
                        elif get_field_projects_to_find('1230154081', 'categories') == 'all':
                            project_id = get_random_project_by_not_personal_settings(id)
                            change_select(id, f'action_with_project_{project_id}')
                            await bot.send_message(id, get_project_as_text(project_id), reply_markup=project_menu_in_find)
                        else:
                            await bot.send_message(id, 'DB ERROR', reply_markup=back_to_main_menu)

                elif 'warn_project_' in user_select:
                    project_id = user_select[13:]
                    await bot.send_message(id, warn_project(id, project_id, msg), reply_markup=warn_project_menu)

                elif 'find_user_' in user_select:
                    if user_select == 'find_user_menu':
                        if msg == '–ù–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏':
                            change_select(id, 'find_user_by_name')
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞", reply_markup=back_to_main_menu)
                        elif msg == '–û–±—â–∏–π –∫–∞—Ç–∞–ª–æ–≥':
                            change_select(id, "find_user_in_general_catalog")
                            random_id = get_random_user_id()
                            path = get_profile(random_id)
                            with open(path, "rb") as file:
                                await bot.send_photo(id, file, reply_markup=see_finding_user_profile)
                            os.remove(path)
                        else:
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=find_user_type_menu)
                    elif user_select == 'find_user_by_name':
                        if len(msg) >= 3 <= 35:
                            n_words = len(re.split(' |-', msg))
                            if n_words > 1 and n_words <= 5:
                                name = msg
                                change_choice_data(id, name)
                                result = find_user_by_name(name, 0)
                                if result[0] != 0:
                                    change_select(id, f"find_user_by_name_{result[1]}")
                                    path = get_profile(result[0])
                                    with open(path, "rb") as file:
                                        await bot.send_photo(id, file, reply_markup=next_and_back_to_main_menu_menu)
                                    os.remove(path)
                                else:
                                    await bot.send_message(id, "–ü–æ —Ç–∞–∫–æ–º—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_to_main_menu)
                            else:
                                await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ò–º—è –§–∞–º–∏–ª–∏—é")
                        else:
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ò–º—è –§–∞–º–∏–ª–∏—é")
                    
                elif 'create_project_' in user_select: #–°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê
                    if user_select == 'create_project_name':
                        if len(msg) < 50:
                            if len(msg.rsplit("    ")) == 1 and msg.rsplit("    ")[0] == msg:
                                if check_full_project_sample(id):
                                    add_info_in_project_sample(id, "project_name", msg)
                                    change_select(id, "create_project_final_step")
                                    await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                    videos = get_photo_from_project_sample(id)
                                    photos = get_photo_from_project_sample(id)
                                    if photos != 0:
                                        for photo in photos:
                                            with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                                await bot.send_photo(id, file)
                                    video_menu = get_video_from_project_sample(id)
                                    if video_menu != None:
                                        await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)

                                else:
                                    change_select(id, 'create_project_description')
                                    add_info_in_project_sample(id, "project_name", msg)
                                    await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=next_and_back_and_back_to_main_menu_menu)
                            else:
                                await bot.send_message(id, "‚ùó‚ùó‚ùó–ö—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ‚ùó‚ùó‚ùó", reply_markup=next_and_back_to_main_menu_menu)
                        else:
                            await bot.send_message(id, "‚ùó‚ùó‚ùó–õ–∏–º–∏—Ç –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤‚ùó‚ùó‚ùó", reply_markup=next_and_back_to_main_menu_menu)
                    
                    elif user_select == 'create_project_description':
                        if len(msg) < 400:
                            if len(msg.rsplit("    ")) == 1 and msg.rsplit("    ")[0] == msg:
                                if check_full_project_sample(id):
                                    add_info_in_project_sample(id, "project_description", msg)
                                    change_select(id, "create_project_final_step")
                                    await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                    photos = get_photo_from_project_sample(id)
                                    if photos != 0:
                                        for photo in photos:
                                            with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                                await bot.send_photo(id, file)
                                    video_menu = get_video_from_project_sample(id)
                                    if video_menu != None:
                                        await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                                    
                                else:
                                    change_select(id, 'create_project_type')
                                    add_info_in_project_sample(id, "project_description", msg)
                                    await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=create_project_type_menu)
                            else:
                                await bot.send_message(id, "‚ùó‚ùó‚ùó–ö—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ‚ùó‚ùó‚ùó", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        else:
                            await bot.send_message(id, "‚ùó‚ùó‚ùó–õ–∏–º–∏—Ç –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤‚ùó‚ùó‚ùó", reply_markup=next_and_back_and_back_to_main_menu_menu)
                    
                    elif user_select == 'create_project_type':
                        if msg == '–û–Ω–ª–∞–π–Ω':
                            change_select(id, "create_project_category")
                            add_info_in_project_sample(id, "project_type", msg)
                            add_info_in_project_sample(id, "project_city", "none")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
                        elif msg == '–û—Ñ—Ñ–ª–∞–π–Ω':
                            change_select(id, "create_project_geo")
                            add_info_in_project_sample(id, "project_type", msg)
                            await bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=next_and_back_and_back_to_main_menu_menu)
                        else:
                            await bot.send_message(id, "‚ùó‚ùó‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ ‚ùó‚ùó‚ùó", reply_markup=next_and_back_and_back_to_main_menu_menu)
                    
                    elif user_select == 'create_project_category':
                        if check_project_category(msg):
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            content["project_subcategories"] = ''
                            with open(f"json/creating_project/{id}.json", "w") as file:
                                file.write(json.dumps(content))
                            change_select(id, "create_project_subcategories")
                            add_info_in_project_sample(id, "project_category", msg)
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 4 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=select_category_for_project)
                        else:
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=select_category_for_project)
                    
                    elif user_select == 'create_project_subcategories':
                        if check_project_category(msg):
                            if check_uniqueness_categories_project(id, "project_subcategories", msg):
                                if check_count_categories_project(id, 'project_subcategories'):
                                    add_info_in_project_sample(id, "project_subcategories", msg)
                                    await bot.send_message(id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {msg}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=select_category_for_project)
                                else:
                                    with open(f"json/creating_project/{id}.json", "r") as file:
                                        content = json.load(file)
                                    content["project_need_categories"] = ''
                                    with open(f"json/creating_project/{id}.json", "w") as file:
                                        file.write(json.dumps(content))
                                    add_info_in_project_sample(id, "project_subcategories", msg)
                                    change_select(id, "create_project_need_categories")
                                    await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_type_for_need_categories_of_project)
                            else:
                                await bot.send_message(id, "–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                        else:
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=select_category_for_project)

                    elif user_select == 'create_project_need_categories':
                        if msg == '–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã':
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_category_for_profile)
                        elif msg == '–ë–µ–∑ –≤—ã–±–æ—Ä–∞':
                            if check_full_project_sample(id):
                                    add_info_in_project_sample(id, "project_need_categories", msg)
                                    change_select(id, "create_project_final_step")
                                    await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                    photos = get_photo_from_project_sample(id)
                                    if photos != 0:
                                        for photo in photos:
                                            with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                                await bot.send_photo(id, file)
                                    video_menu = get_video_from_project_sample(id)
                                    if video_menu != None:
                                        await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)       
                            else:
                                change_select(id, "create_project_price")
                                add_info_in_project_sample(id, "project_need_categories", '–ù–µ—Ç—É')
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                        elif msg == '–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã':
                            if check_full_project_sample(id):
                                add_info_in_project_sample(id, "project_need_categories", msg)
                                change_select(id, "create_project_final_step")
                                await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                photos = get_photo_from_project_sample(id)
                                if videos != 0:
                                    for photo in photos:
                                        with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                            await bot.send_photo(id, file)
                                video_menu = get_video_from_project_sample(id)
                                if video_menu != None:
                                    await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                                
                            else:
                                change_select(id, "create_project_price")
                                add_info_in_project_sample(id, "project_need_categories", get_user_interests(id))
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                        elif check_category(msg):
                            if check_uniqueness_categories_project(id, "project_need_categories", msg):
                                if check_count_categories_project(id, 'project_need_categories'):
                                    add_info_in_project_sample(id, "project_need_categories", msg)
                                    await bot.send_message(id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {msg}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", reply_markup=select_category_for_profile)
                                else:
                                    if check_full_project_sample(id):
                                        add_info_in_project_sample(id, "project_need_categories", msg)
                                        change_select(id, "create_project_final_step")
                                        await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                        photos = get_photo_from_project_sample(id)
                                        if photos != 0:
                                            for photo in photos:
                                                with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                                    await bot.send_photo(id, file)
                                        video_menu = get_video_from_project_sample(id)
                                        if video_menu != None:
                                            await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                                    else:
                                        add_info_in_project_sample(id, "project_need_categories", msg)
                                        change_select(id, "create_project_price")
                                        await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                            else:
                                await bot.send_message(id, "–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                        else:
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", reply_markup=select_category_for_profile)
                    
                    elif user_select == 'create_project_price':
                        if msg == '–§–∏–∫—Å —Ü–µ–Ω–∞ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏—è':
                            change_select(id, "create_project_price_fixed")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã\–§–æ—Ä–º–∞—Ç: –°–£–ú–ú–ê $ –∏–ª–∏ –°–£–ú–ú–ê ‚ÇΩ", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–†–∞–∑–º—ã—Ç—ã–π —Ü–µ–Ω–Ω–∏–∫':
                            change_select(id, "create_project_price_intermediate")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç—ã\–§–æ—Ä–º–∞—Ç: –°–£–ú–ú–ê $ - –°–£–ú–ú–ê $ –∏–ª–∏ –°–£–ú–ú–ê ‚ÇΩ - –°–£–ú–ú–ê ‚ÇΩ", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–ë–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ–µ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥–∏':
                            add_info_in_project_sample(id, "project_price", msg)
                            with open(f"json/creating_project/{id}.json") as file:
                                content = json.load(file)
                            if len(content["project_media"]) == 5:
                                change_select(id, "create_project_final_step")
                                await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                photos = get_photo_from_project_sample(id)
                                if videos != 0:
                                    for photo in photos:
                                        with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                            await bot.send_photo(id, file)
                                video_menu = get_video_from_project_sample(id)
                                if video_menu != None:
                                    await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                            else:
                                change_select(id, "create_project_media")
                                await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)
                    
                    elif user_select == 'create_project_price_fixed':
                        if len(msg) < 12:
                            add_info_in_project_sample(id, "project_price", msg)
                            with open(f"json/creating_project/{id}.json") as file:
                                content = json.load(file)
                            if len(content["project_media"]) == 5:
                                change_select(id, "create_project_final_step")
                                await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                photos = get_photo_from_project_sample(id)
                                if videos != 0:
                                    for photo in photos:
                                        with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                            await bot.send_photo(id, file)
                                video_menu = get_video_from_project_sample(id)
                                if video_menu != None:
                                    await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                            else:
                                change_select(id, "create_project_media")
                                await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        else:
                            await bot.send_message(id, "‚ùó‚ùó‚ùó–õ–∏–º–∏—Ç –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤‚ùó‚ùó‚ùó")

                    elif user_select == 'create_project_price_intermediate':
                        if len(msg) < 18:
                            if len(msg.rsplit("-")) == 2 and msg.rsplit("-")[0] != '':
                                add_info_in_project_sample(id, "project_price", msg)
                                with open(f"json/creating_project/{id}.json") as file:
                                    content = json.load(file)
                                if len(content["project_media"]) == 5:
                                    change_select(id, "create_project_final_step")
                                    await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                    photos = get_photo_from_project_sample(id)
                                    if photos != 0:
                                        for photo in photos:
                                            with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                                await bot.send_photo(id, file)
                                    video_menu = get_video_from_project_sample(id)
                                    if video_menu != None:
                                        await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                                else:
                                    change_select(id, "create_project_media")
                                    await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)
                            else:
                                await bot.send_message(id, '‚ùó‚ùó‚ùó–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª "-" –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞‚ùó‚ùó‚ùó')
                        else:
                            await bot.send_message(id, "‚ùó‚ùó‚ùó–õ–∏–º–∏—Ç –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–≤‚ùó‚ùó‚ùó")
                    
                    elif user_select == 'create_project_media':
                        if 'youtube.com' in msg.lower():
                            add_media_in_project_sample(id, 'video', message.text)
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                structure = json.load(file)
                                file.close()
                            len_array = len(structure["project_media"])
                            if len_array == 5:
                                change_select(id, "create_project_final_step")
                                await bot.send_message(id, get_project_about_sample(id), reply_markup=ending_creating_project_menu)
                                photos = get_photo_from_project_sample(id)
                                if videos != 0:
                                    for photo in photos:
                                        with open(f"photos/creating_project/{photo}.png", "rb") as file:
                                            await bot.send_photo(id, file)
                                video_menu = get_video_from_project_sample(id)
                                if video_menu != None:
                                    await bot.send_message(id, "–í–∏–¥–µ–æ:", reply_markup=video_menu)
                            else:
                                await bot.send_message(id, f"–û—Ç–ø—Ä–∞–≤—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ")
                        else:
                            await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ")
                
                    elif user_select == 'create_project_final_step':
                        if msg == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ':
                            change_select(id, "create_project_name")
                            if os.path.exists(f"json/creating_project/{id}.json"):
                                os.remove(f"json/creating_project/{id}.json")
                            project_id = randint(1111111111, 9999999999)
                            create_project_sample(id, project_id)
                            await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞':
                            change_select(id, "create_project_media")
                            with open(f"json/creating_project/{id}.json", "r") as file:
                                content = json.load(file)
                            content["project_media"] = []
                            with open(f"json/creating_project/{id}.json", "w") as file:
                                file.write(json.dumps(content))
                            await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n–í–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ YouTube.com", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ':
                            change_select(id, "create_project_name")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
                            change_select(id, "create_project_description")
                            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=next_and_back_and_back_to_main_menu_menu)
                        elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
                            change_select(id, "create_project_category")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–µ—Ç–∞", reply_markup=select_category_for_project)
                        elif msg == '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ':
                            change_select(id, "create_project_price")
                            await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ", reply_markup=select_type_of_payment_for_project)
                        elif msg == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
                            change_select(id, "")
                            send_project_sample(id)
                            project_id = randint(1111111111, 9999999999)
                            create_project_sample(id, project_id)
                            await bot.send_message(id, '–í–∞—à –ø—Ä–æ–µ–∫—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã". –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤–∞—à –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup=get_main_menu(id))
                
                elif 'create_question' in user_select:
                    if user_select == 'create_question_category_1' or user_select == 'create_question_category_2':
                        await bot.delete_message(id, message.message_id)
                        if check_category(msg):
                            category = msg
                            if user_select == 'create_question_category_1':
                                change_select(id, 'create_question_category_2')
                                add_info_in_creating_question(id, 'question_category_1', msg)
                                await bot.send_message(id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {category}. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ', reply_markup=select_category_for_profile)
                            elif user_select == 'create_question_category_2':
                                change_select(id, 'create_question_input_question')
                                add_info_in_creating_question(id, 'question_category_2', msg)
                                await bot.send_message(id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {category}. –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.', reply_markup=next_and_back_menu)
                    elif user_select == 'create_question_input_question':
                        if len(msg) <= 100:
                            change_select(id, 'create_question_add_photo_file_1')
                            add_info_in_creating_question(id, 'question_text', msg)
                            await bot.send_message(id, '–î–æ–±–∞–≤—Ç–µ –¥–æ 3-–µx —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ', reply_markup=next_and_back_menu)
                        else:
                            await bot.send_message(id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. –õ–∏–º–∏—Ç: 100 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=next_and_back_menu)
                    elif user_select == 'create_question_add_photo_file_1' or user_select == 'create_question_add_photo_file_2' or user_select == 'create_question_add_photo_file_3':
                        await bot.send_message(id, '–î–æ–±–∞–≤—Ç–µ –¥–æ 3-–µ—Ö —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –î–∞–ª–µ–µ', reply_markup=next_and_back_menu)

                elif msg == 'üìò –ó–∞–¥–∞—á–∞':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, 'üìò –ó–∞–¥–∞—á–∞:')

                elif msg == '‚ùì –í–æ–ø—Ä–æ—Å':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, '‚ùì –í–æ–ø—Ä–æ—Å:')
                
                elif msg == 'üîñÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, 'üîñ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:') 

                elif msg == 'üìß –û—Ç–∫–ª–∏–∫–∏':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, 'üìß –û—Ç–∫–ª–∏–∫–∏:') 

                elif msg == 'üè¢ –í —Ä–∞–±–æ—Ç–µ':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, 'üè¢ –í —Ä–∞–±–æ—Ç–µ:') 

                
                
                elif 'admin_' in user_select:
                    if check_admin_level(id):
                        if msg == 'üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
                            await bot.delete_message(id, message.message_id)
                            level = check_admin_level(id)
                            print(level)
                            if level == 1:
                                change_select(id, "admin_panel")
                                await bot.send_message(message.from_user.id, '–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=admin_panel_1_menu)
                            elif level == 2:
                                change_select(id, "admin_panel")
                                await bot.send_message(message.from_user.id, '–ü–∞–Ω–µ–ª—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=admin_panel_2_menu)
                        if user_select == 'admin_panel':
                            if msg == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
                                await bot.delete_message(id, message.message_id)
                                change_select(id, "admin_accept")
                                await bot.send_message(id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", reply_markup=admin_accept_menu)
                                pass 
                        elif user_select == 'admin_accept':
                            if check_admin_level(id, 1):
                                if msg == 'üìÅ –ü—Ä–æ–µ–∫—Ç':
                                    project_text, project_id, succes = get_project_to_accept()
                                    if succes:
                                        change_select(id, f"admin_accept_project_{project_id}")
                                        await bot.send_message(id, project_text, reply_markup=accept_menu)
                                    else:
                                        await bot.send_message(id, "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", reply_markup=get_admin_panel(id))
                            elif msg == '‚ùì –í–æ–ø—Ä–æ—Å':
                                pass
                            elif msg == '‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è':
                                pass
                        elif 'admin_accept_project_' in user_select:
                            project_id = user_select[21:]

                            if msg == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
                                update_status_project(project_id, 'accept')
                                await bot.send_message(id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç")
                            else:
                                update_status_project(project_id, 'unaccept', msg)
                                await bot.send_message(id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–µ–∫—Ç")
                            await bot.send_message(id, "–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", reply_markup=get_admin_panel(id))


                elif '‚úèÔ∏è' in msg:
                    if msg == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
                        if user_select == 'profile_menu':
                            change_select(id, 'edit_profile_menu')
                            await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.', reply_markup=edit_profile_item_menu)
                    else:
                        edit = msg[3:]
                        if edit == '–§–æ—Ç–æ':
                            change_select(id, f'edit_item_profile_menu_photo')
                            await bot.send_message(id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=back_menu)
                        elif edit == '–û–ø–∏—Å–∞–Ω–∏–µ':
                            change_select(id, f'edit_item_profile_menu_description')
                            await bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=back_menu)
                        elif edit == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è':
                            change_select(id, f'edit_item_profile_menu_category_profile')
                            await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=select_category_for_profile)
                        elif edit == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤':
                            change_select(id, f'edit_item_profile_menu_category_interests')
                            await bot.send_message(id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.', reply_markup=select_category_for_profile)
                elif msg == '‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è':
                    if user_select == 'profile_menu':
                        change_select(id, 'verification_profile_menu')
                        with open(f'json/profile/{id}.json', 'r') as file:
                            content = json.load(file)
                            file.close()
                        if content["verification"] == '-':
                            await bot.send_message(id, '–í–∞—Å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏', reply_markup=back_menu)
                            set_verification(id)
                elif msg == 'üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                    if user_select == 'profile_menu':
                        change_select(id, 'notifications_profile_menu')
                        await bot.send_message(id, get_notifications(id), reply_markup=back_menu)
                elif msg == '–ë–∞–ª–∞–Ω—Å':
                    change_select(id, "balance_menu_balance")
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, f"–ë–∞–ª–∞–Ω—Å:\n{get_balance(id)}‚ÇΩ", reply_markup=balance_menu)
                elif msg == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å':
                    change_select(id, "balance_menu_replenish")
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å:\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100‚ÇΩ", reply_markup=replenish_menu)
                elif msg == '–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤':
                    change_select(id, "balance_menu_payments_log")
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, f"–î–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç.", reply_markup=purse_log_menu)
                elif msg == '–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ':
                    text = get_payments_log_by_action(id, "replenish")
                    text = '–ó–∞—á–∏—Å–ª–µ–Ω–∏—è:' + text
                    change_select(id, "balance_menu_payments_log_replenish")
                    await bot.send_message(id, text, reply_markup=back_button)
                elif msg == '–°–ø–∏—Å–∞–Ω–∏–µ':
                    text = get_payments_log_by_action(id, "spending")
                    text = '–°–ø–∏—Å–∞–Ω–∏—è:' + text
                    change_select(id, "balance_menu_payments_log_replenish")
                    await bot.send_message(id, text, reply_markup=back_button)
                elif msg == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':
                    await bot.delete_message(id, message.message_id)
                    await bot.send_message(id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=get_main_menu(id))
                elif msg.isdigit():
                    if 'balance_menu_replenish' in user_select:
                        await bot.delete_message(id, message.message_id)
                        sum = msg
                        if sum.isdigit():
                            if int(sum) >= 100 and int(sum) <= 10000:
                                await bot.send_invoice(chat_id=message.from_user.id, title=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {sum}‚ÇΩ", description=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {sum}‚ÇΩ", payload=f"buy_{sum}", provider_token=PAYMENT_TOKEN, currency="RUB", start_parameter="buy", prices=[{"label": "Py6", "amount": int(sum)*100}], reply_markup=back_button)
                            else:
                                await bot.send_message(id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100‚ÇΩ –¥–æ 10,000‚ÇΩ", reply_markup=back_button)
                        else:
                            await bot.send_message(id, "–û—Ç–ø—Ä–∞–≤—Ç–µ —á–∏—Å–ª–æ")
        else:
            await bot.send_message(id, "–í–≤–µ–¥–∏—Ç–µ /start")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = False)